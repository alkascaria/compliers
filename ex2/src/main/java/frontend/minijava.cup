package minijava.syntax;

import minijava.ast.*;
import static minijava.ast.MJ.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import frontend.SyntaxError;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;


class MiniJavaParser;
   
// Parser code to change the way the parser reports errors (include
// line and column number of the error). 
parser code {:
    
    private Consumer<SyntaxError> onError;

    public void onError(Consumer<SyntaxError> onError) {
        this.onError = onError;
    }
    

    @Override
    public void syntax_error(Symbol info) {

        List<Integer> expectedTokens = expected_token_ids();
        
        int line, column;
        StringBuilder message = new StringBuilder("Unexpected token ");
        if (info instanceof ComplexSymbol) {
            ComplexSymbol s = (ComplexSymbol) info;
            line = s.getLeft().getLine();
            column = s.getLeft().getColumn();
            
            message.append(s.getName());
            
            if (s.value != null) {
                message.append("(");
                message.append(s.value);
                message.append(")");
            }
        } else {
            line = cur_token.left;
            column = cur_token.right;
        }
        
        if (!expectedTokens.isEmpty()) {
            message.append(", expected one of the following: ");
            boolean first = true;
            for (int expected : expectedTokens){
                if (!first) {
                    message.append(", ");
                }
                message.append(symbl_name_from_id(expected));
                first = false;
            }
        }
        
        
        SyntaxError err = new SyntaxError(message.toString(), line, column);
        if (onError == null) {
            System.err.println(err);
        } else {
            onError.accept(err);
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        // ignore
    }
    
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal INVALID_TOKEN;

// Java keywords:
terminal ABSTRACT,  CONTINUE,   FOR,          NEW,         SWITCH,
         ASSERT,    DEFAULT,    IF,           PACKAGE,     SYNCHRONIZED,
         BOOLEAN,   DO,         GOTO,         PRIVATE,     THIS,
         BREAK,     DOUBLE,     IMPLEMENTS,   PROTECTED,   THROW,
         BYTE,      ELSE,       IMPORT,       PUBLIC,      THROWS,
         CASE,      ENUM,       INSTANCEOF,   RETURN,      TRANSIENT,
         CATCH,     EXTENDS,    INT,          SHORT,       TRY,
         CHAR,      FINAL,      INTERFACE,    STATIC,      VOID,
         CLASS,     FINALLY,    LONG,         STRICTFP,    VOLATILE,
         CONST,     FLOAT,      NATIVE,       SUPER,       WHILE;



// additional keywords:
terminal MAIN, STRING, LENGTH, SYSTEM, OUT, PRINTLN;

// symbols:
terminal LBRACE, RBRACE, // { }
         LBRACKET, RBRACKET, // [ ]
         LPAREN, RPAREN, // ()
         DOT, SEMI, COMMA, EQ, NEG, AND, PLUS, MINUS, TIMES, DIV, LESS, EQUALS;

// literals:
terminal TRUE, FALSE, NULL;

terminal String   NUMBER, ID;
   
// Non terminals used in the grammar section.  
non terminal MJProgram program;
non terminal MJMainClass mainClass;
non terminal MJClassDeclList classesDeclList;
non terminal MJClassDecl classDecl;
non terminal MJBlock block;
non terminal MJType type;
non terminal MJStatement statement;
non terminal MJTypeClass id;


non terminal MJMemberDecl memberDecl;


/* ----------------------------Grammar Section-------------------- */

//initialization of the AST
program   ::=  mainClass:mainC classesDeclList:classesDecl
      {:
            RESULT = Program(mainC, classesDecl);
      :} ;

//Detecting main class
//mainClass ::= CLASS ID:className LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID:argsName RPAREN block:blockName RBRACE
mainClass ::= CLASS ID:className LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID:argsName RPAREN block:blockName RBRACE
    {:
        RESULT = MainClass(className, argsName, blockName);
    :};

//at the beginning, remove braces.
block ::= LBRACE block:blockList RBRACE
    {:
        RESULT = blockList;
    :}
    //statement found?
    | statement:s block:blockList
    {:
        blockList.add(s);
        RESULT = blockList;
    :}
    //type found?
     | type:t ID:idType SEMI block:blockList
     {:
        RESULT = blockList;
     :}
     | //empty block?
     {:

     :}
     ;


type ::=
     INT LBRACKET RBRACKET
    {:
        RESULT = TypeIntArray();
    :}
    | INT
    {:
        RESULT = TypeInt();
    :}
    | BOOLEAN
    {:
        RESULT = TypeBool();
    :}
    //ask if this is alright.
    | ID:idName
    {:
        RESULT = TypeClass(idName);
    :};



////TOASK: how to make a statement return a block as result??
//  statement ::= block:b statement:s
 //     {:
 //         RESULT = s;
 //     :}
 //     ;




//detecting extra classes and adding them to the list of existing classes
classesDeclList ::= classDecl:classD  classesDeclList:classesList
  {:
        classesList.add(classD);
        RESULT = classesList;
   :};

//parsing the content of the extra class detected.
//classDecl ::= CLASS ID:className LBRACE memberDecl:memb RBRACE
 //  {:   :}
 //  | CLASS ID:className EXTENDS ID:classExtended LBRACE classesDeclList:memb RBRACE
  // {:   :}
//
  // ;


//TODO: parse the content of memberDecl















