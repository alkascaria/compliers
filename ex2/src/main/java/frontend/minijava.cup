package minijava.syntax;
import minijava.ast.*;
import static minijava.ast.MJ.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import frontend.SyntaxError;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
class MiniJavaParser;


// Parser code to change the way the parser reports errors (include
// line and column number of the error).
parser code {:

    private Consumer<SyntaxError> onError;
    public void onError(Consumer<SyntaxError> onError) {
        this.onError = onError;
    }

    @Override
    public void syntax_error(Symbol info) {
        List<Integer> expectedTokens = expected_token_ids();

        int line, column;
        StringBuilder message = new StringBuilder("Unexpected token ");
        if (info instanceof ComplexSymbol) {
            ComplexSymbol s = (ComplexSymbol) info;
            line = s.getLeft().getLine();
            column = s.getLeft().getColumn();

            message.append(s.getName());

            if (s.value != null) {
                message.append("(");
                message.append(s.value);
                message.append(")");
            }
        } else {
            line = cur_token.left;
            column = cur_token.right;
        }

        if (!expectedTokens.isEmpty()) {
            message.append(", expected one of the following: ");
            boolean first = true;
            for (int expected : expectedTokens){
                if (!first) {
                    message.append(", ");
                }
                message.append(symbl_name_from_id(expected));
                first = false;
            }
        }


        SyntaxError err = new SyntaxError(message.toString(), line, column);
        if (onError == null) {
            System.err.println(err);
        } else {
            onError.accept(err);
        }
    }
    @Override
    public void report_fatal_error(String message, Object info) {
        // ignore
    }

:};


/* ------------Declaration of Terminals and Non Terminals Section----------- */
terminal INVALID_TOKEN;
// Java keywords:
terminal ABSTRACT,  CONTINUE,   FOR,          NEW,         SWITCH,
         ASSERT,    DEFAULT,    IF,           PACKAGE,     SYNCHRONIZED,
         BOOLEAN,   DO,         GOTO,         PRIVATE,     THIS,
         BREAK,     DOUBLE,     IMPLEMENTS,   PROTECTED,   THROW,
         BYTE,      ELSE,       IMPORT,       PUBLIC,      THROWS,
         CASE,      ENUM,       INSTANCEOF,   RETURN,      TRANSIENT,
         CATCH,     EXTENDS,    INT,          SHORT,       TRY,
         CHAR,      FINAL,      INTERFACE,    STATIC,      VOID,
         CLASS,     FINALLY,    LONG,         STRICTFP,    VOLATILE,
         CONST,     FLOAT,      NATIVE,       SUPER,       WHILE;
// additional keywords:
terminal MAIN, STRING, LENGTH, SYSTEM, OUT, PRINTLN;
// symbols:
terminal LBRACE, RBRACE, // { }
         LBRACKET, RBRACKET, // [ ]
         LPAREN, RPAREN, // ()
         DOT, SEMI, COMMA, EQ, NEG, AND, PLUS, MINUS, TIMES, DIV, LESS, EQUALS;
// literals:
terminal TRUE, FALSE, NULL;
terminal String   NUMBER, ID;

// Non terminals used in the grammar section.
non terminal MJProgram program;
non terminal MJMainClass mainClass;
non terminal MJClassDeclList classesDeclList;
non terminal MJClassDecl classDecl;
non terminal MJBlock block;
non terminal MJType type;
non terminal MJStatement statement;
non terminal MJStatement blockStatement;
non terminal MJVarDecl varDecl;
non terminal MJUnaryOperator unaryOperator;
non terminal MJTypeClass id;
non terminal MJStmtIf stmtIf;
non terminal MJStmtWhile stmtWhile;
non terminal MJExpr expr;
non terminal MJOperator operator;
non terminal List<MJStatement> blockStatementsList;
non terminal MJExprList exprsList;
non terminal MJExprList exprRest;
non terminal MJMemberDecl memberDecl;
non terminal List<MJMemberDecl> memberDeclList;
non terminal MJExtended extended;
non terminal MJVarDeclList varDeclList;
non terminal MJVarDeclList varDeclRestList;
non terminal MJExtendsClass extendsClass;
non terminal MJMethodDecl methodDecl;

//precedence from bottom to top.
//not really sure where we should put the dot


precedence left EQ;
precedence left AND;
precedence left EQUALS;
precedence left LESS;
precedence left  PLUS, MINUS;
precedence left  TIMES, DIV;
precedence left LBRACKET, RBRACKET, DOT, LPAREN, RPAREN;


/* ----------------------------Grammar Section-------------------- */

//1.	Grammer for  Program

 //initialization of the AST
 program   ::=  mainClass:mainC classesDeclList:classesDecl
       {:
             RESULT = Program(mainC, classesDecl);
       :} ;

//2.	Grammer for MainClass

 //Detecting main class
 mainClass ::= CLASS ID:className LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID:argsName RPAREN block:blockName RBRACE
     {:
         RESULT = MainClass(className, argsName, blockName);
     :};

//3.	Grammar for ClassDecl




//detecting extra classes and adding them to the list of existing classes
//classesDeclList ::= classDecl:classD  classesDeclList:classesList
classesDeclList ::= classDecl:classD  classesDeclList:classesList
  {:

        classesList.addFront(classD);

        //finally return the list with the newly added class
        RESULT =  classesList;
  :}
  |
  {:
    RESULT = MJ.ClassDeclList();
  :}
  ;

classDecl::= CLASS ID:className extended:ext LBRACE memberDeclList:memberDList RBRACE
	{:
	   MJVarDeclList varDeclList = MJ.VarDeclList();
	   MJMethodDeclList methodDeclList = MJ.MethodDeclList();

        //TODO: get method declaration working
        for(int i = 0; i  < memberDList.size(); i++)
        {
            MJElement elemInList = memberDList.get(i);
            String classElem = elemInList.substring(elemInList.lastIndexOf('.') + 1);

            System.out.println(classElem);
            //if a method declaration list
             if(classElem.equals("class minijava.ast.MJMethodDeclImpl"))
             {
                methodDeclList.add((MJMethodDecl)elemInList);
             }
             //if varDeclList
             else if (classElem.equals("class minijava.ast.MJVarDeclListImpl"))
             {
                varDeclList.add((MJVarDecl) elemInList);
             }
        }

        RESULT = ClassDecl(className, ext, varDeclList, methodDeclList);
	:};

	extended ::= EXTENDS ID:classExtended
        {:
            RESULT = ExtendsClass(classExtended);
        :}
        |
        {:
           RESULT = ExtendsNothing();
       :};

//4.	Grammer for MemberDecl

memberDeclList ::=
    //found a member inside it, followed by more members
     memberDecl:membDecl memberDeclList:membDeclList
     {:
        System.out.println("Found a member?");
        membDeclList.add(membDecl);
        RESULT = membDeclList;
     :}
     //if empty, return an empty list
     |
     {:
        RESULT = new LinkedList<MJMemberDecl>();
     :};

memberDecl ::= varDecl:varD
    {:
        System.out.println("Found something here as var");
        RESULT = varD;
    :}
    | methodDecl:methDecl
    {:
        System.out.println("Found a method decl");
        RESULT = methDecl;
    :};

//5.	Grammer for VarDecl

varDecl ::= type:t ID:id SEMI
{:
    System.out.println("Found a varDecl");
    RESULT = VarDecl(t,id);
:};

//6.	Grammer for MethodDecl

methodDecl ::=  type:t ID:methodName LPAREN varDeclList:varDList RPAREN block:b
    {:
    System.out.println("Parsed method");
        RESULT = MethodDecl(t, methodName, varDList, b);
    :};

//7.	Grammer for ParamList

//paramList
varDeclList ::= type:t ID:id varDeclList:varDList
    {:
        varDList.add(VarDecl(t, id));
        RESULT = varDList;

    :}
    | COMMA type:t ID:id varDeclList:varDList           //8.	Grammer for ParamRest
    {:
         varDList.add(VarDecl(t, id));
         RESULT = varDList;
    :}
    //it is optional. so it can also be empty
    |
    {:
        RESULT = MJ.VarDeclList();
    :};

//9.	Grammer for Type

type ::= INT LBRACKET RBRACKET
    {:
        RESULT = TypeIntArray();
    :}
    | INT
    {:
        RESULT = TypeInt();
    :}
    | BOOLEAN
    {:
        RESULT = TypeBool();
    :}
    | ID:idName
    {:
        RESULT = TypeClass(idName);
    :};

//10.	Grammer for Block

 block ::= LBRACE blockStatementsList:blockStatements RBRACE
     {:
         //putting blockstatements into the block.
         RESULT = MJ.Block(blockStatements);
     :};

 blockStatementsList ::= blockStatement:blockStatement blockStatementsList:blockStmtList
     {:
         blockStmtList.add(blockStatement);
         RESULT = blockStmtList;
     :}
     |
     {:
         RESULT = new LinkedList<MJStatement>();
     :};

//11.	Grammer for BlockStatement

 blockStatement ::= statement:s
        {:
             RESULT = s;
        :}
        | varDecl:varD
        {:
             RESULT = varD;
        :};

//12.	Grammer for BlockStatement

statement ::=   block:b
       {:
          RESULT = b;
       :}
       | IF LPAREN expr:exprCondition RPAREN statement:stmtTrue ELSE statement:stmtFalse
      {:
          RESULT = StmtIf(exprCondition, stmtTrue, stmtFalse);
      :}
      | WHILE LPAREN expr:exprCondition RPAREN statement:stmtWhile
      {:
         RESULT = StmtWhile(exprCondition, stmtWhile);
      :}
      | RETURN expr:exprReturn SEMI
      {:
         RESULT = StmtReturn(exprReturn);
      :}
      | SYSTEM DOT OUT DOT PRINTLN LPAREN expr:exprPrint RPAREN SEMI
      {:
        RESULT = StmtPrint(exprPrint);
      :}
      | expr:exprSemi SEMI
      {:
        RESULT = StmtExpr(exprSemi);
      :}
      | expr:exprLeft EQ expr:exprRight SEMI
      {:
        RESULT = StmtAssign(exprLeft, exprRight);
      :}
     ;

//13.	Grammer for Exp

//introduces - expr or ! expr
unaryOperator ::= MINUS
    {:
        RESULT = UnaryMinus();
    :}
    | NEG
    {:
        RESULT = Negate();
    :};


expr ::=
     expr:exprLeft AND expr:exprRight
    {:
        RESULT = ExprBinary(exprLeft, And(), exprRight);
    :}
     | expr:exprLeft PLUS expr:exprRight
     {:
         RESULT = ExprBinary(exprLeft, Plus(), exprRight);
     :}
      | expr:exprLeft MINUS expr:exprRight
     {:
         RESULT = ExprBinary(exprLeft, Minus(), exprRight);
     :}
      | expr:exprLeft TIMES expr:exprRight
     {:
         RESULT = ExprBinary(exprLeft, Times(), exprRight);
     :}
     | expr:exprLeft DIV expr:exprRight
     {:
         RESULT = ExprBinary(exprLeft, Div(), exprRight);
     :}
     | expr:exprLeft LESS expr:exprRight
     {:
         RESULT = ExprBinary(exprLeft, Less(), exprRight);
     :}
     | expr:exprLeft EQUALS expr:exprRight
     {:
         RESULT = ExprBinary(exprLeft, Less(), exprRight);
     :}

    | unaryOperator:o expr:exprNeg
    {:
        RESULT = ExprUnary(o, exprNeg);
    :}
    | expr:arrayExpr LBRACKET expr:arrayIndex RBRACKET
    {:
        //make sure the part preceding it is not an array instantion
       String exprContent = arrayExpr.toString();
        System.err.println("Test");
         RESULT = ArrayLookup(arrayExpr, arrayIndex);

    :}
    | expr:exprArrLength DOT LENGTH
    {:
      RESULT = ArrayLength(exprArrLength);
    :}
     | expr:exprReceiver DOT ID:fieldName
    {:
      RESULT = FieldAccess(exprReceiver, fieldName);
    :}
     //Which one should be picked? And when?
    | expr:exprReceiver DOT ID:methodName LPAREN exprsList:arguments RPAREN
      {:
          RESULT = MethodCall(exprReceiver, methodName, arguments);
      :}
    | TRUE
    {:
      RESULT = BoolConst(true);
    :}
    | FALSE
    {:
      RESULT = BoolConst(false);
    :}
    | ID:varName
    {:
      RESULT = VarUse(varName);
    :}
    //apparently NUMBER is a string too?
    | NUMBER:intValue
    {:
        RESULT = Number(Integer.parseInt(intValue));
    :}
    | THIS
    {:
      RESULT = ExprThis();
    :}
    | NULL
    {:
      RESULT = ExprNull();
    :}
    | NEW INT LBRACKET expr:arraySize RBRACKET
    {:
       System.out.println("array size " + arraySize.toString());
      RESULT = NewIntArray(arraySize);
    :}
    | NEW ID:className LPAREN RPAREN
    {:
      RESULT =  NewObject(className);
    :}
    | LPAREN expr:exprCur RPAREN
    {:
        RESULT = exprCur;
    :};

//14.	Grammer for ExpList

exprsList ::= expr:e exprRest:expsRest
    {:
        expsRest.addFront(e);
        RESULT = expsRest;
    :}
    //if empty, return empty list.
    |
    {:
        RESULT = MJ.ExprList();
    :} ;


exprRest ::= COMMA expr:e exprRest:expsRest
    {:
      //create list containing the elements found so far
      expsRest.addFront(e);
      RESULT = expsRest;
    :}
    //if empty, return empty list
    |{:
        RESULT = MJ.ExprList();
    :}
;


//16.	Grammer for id  -   Done in statement


