package exprs;

import calculator.ast.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;


class ExprParser;

// Parser code to change the way the parser reports errors (include
// line and column number of the error).
parser code {:

  public static class ParserError extends RuntimeException {
        private int line;
        private int column;

        public ParserError(String message, int line, int column) {
            super(message);
            this.line = line;
            this.column = column;
        }


        public int getLine() {
            return line;
        }

        public int getColumn() {
            return column;
        }

        @Override
        public String toString() {
            return "Parser error in line " + line + ":" + column + ": " + getMessage();
        }
    }

    private Consumer<ParserError> onError;

    public void onError(Consumer<ParserError> onError) {
        this.onError = onError;
    }


    @Override
    public void syntax_error(Symbol info) {

        List<Integer> expectedTokens = expected_token_ids();

        int line, column;
        StringBuilder message = new StringBuilder("Unexpected token ");
        if (info instanceof ComplexSymbol) {
            ComplexSymbol s = (ComplexSymbol) info;
            line = s.getLeft().getLine();
            column = s.getLeft().getColumn();

            message.append(s.getName());

            if (s.value != null) {
                message.append("(");
                message.append(s.value);
                message.append(")");
            }
        } else {
            line = cur_token.left;
            column = cur_token.right;
        }

        if (!expectedTokens.isEmpty()) {
            message.append(", expected one of the following: ");
            boolean first = true;
            for (int expected : expectedTokens){
                if (!first) {
                    message.append(", ");
                }
                message.append(symbl_name_from_id(expected));
                first = false;
            }
        }


        ParserError err = new ParserError(message.toString(), line, column);
        if (onError == null) {
            System.err.println(err);
        } else {
            onError.accept(err);
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }

:};



/* ------------Declaration of Terminals and Non Terminals Section----------- */

//Terminals (tokens returned by the scanner).
terminal           PLUS, MINUS, TIMES, DIV, LPAREN, RPAREN, INVALID_TOKEN;
terminal String   NUMBER;

// Non terminals used in the grammar section.
non terminal Expr expr;
non terminal Expr expr_operation;


precedence left TIMES, DIV, PLUS, MINUS;



/* ----------------------------Grammar Section-------------------- */


expr ::=

    // TIMES with brackets
      LPAREN expr:l TIMES expr:r RPAREN
       {: RESULT = new ExprMult(l, r, 0); :}
    //TIMES negated
    | MINUS LPAREN expr:l TIMES expr:r RPAREN
             {: RESULT = new ExprMult(l, r, 1); :}
    //TIMES no brackets
    | expr:l TIMES expr:r
       {: RESULT = new ExprMult(l, r, 0); :}

    //DIV with brackets
    | LPAREN expr:l DIV expr:r RPAREN
       {: RESULT = new ExprDiv(l, r, 0); :}
    //DIV negated
    | MINUS LPAREN expr:l DIV expr:r RPAREN
           {: RESULT = new ExprDiv(l, r, 1); :}
     //DIV no brackets
         | expr:l DIV expr:r
            {: RESULT = new ExprDiv(l, r, 0); :}

    //PLUS with brackets
    | LPAREN expr:l PLUS expr:r RPAREN
       {: RESULT = new ExprAdd(l, r, 0); :}
     //PLUS negated
    | MINUS LPAREN expr:l PLUS expr:r RPAREN
          {: RESULT = new ExprAdd(l, r, 1); :}
     //PLUS no brackets
      | expr:l PLUS expr:r
            {: RESULT = new ExprAdd(l, r, 0); :}

    //MINUS with brackets
    | LPAREN expr:l MINUS expr:r RPAREN
       {: RESULT = new ExprSub(l, r, 0); :}
    //MINUS negated
    | MINUS LPAREN expr:l MINUS expr:r RPAREN
        {: RESULT = new ExprSub(l, r, 1); :}
     // no parentheses version
    | expr:l MINUS expr:r
         {: RESULT = new ExprSub(l, r, 0); :}


     //negated number
    | MINUS NUMBER:n
        {: RESULT = new ExprNumber("-" + n); :}
  |  NUMBER:n
    {: RESULT = new ExprNumber(n); :}
  ;
